@page
@using FacilityMonitoring.Common.DataLayer



<h2 class=>H2 Generators</h2>

@(Html.DevExtreme().DataGrid<GeneratorReadingDTO>()
    .ID("genReadings")
    .Visible(false)
    .ShowBorders(true)
    .HighlightChanges(true)
    .AllowColumnResizing(true)
    .ColumnAutoWidth(true)
    .Columns(columns => {
        columns.AddFor(d => d.TimeStamp).DataField("timeStamp");
        columns.AddFor(d => d.Identifier).DataField("identifier");
        columns.AddFor(d => d.SystemMode).DataField("systemMode");
        columns.AddFor(d => d.OperationMode).DataField("operationMode");
        columns.AddFor(d => d.SystemState).DataField("systemState");
        columns.AddFor(d => d.SystemPressure).DataField("systemPressure").Caption("System Pressure,PSI");
        columns.AddFor(d => d.WaterTemperature).DataField("waterTemperature").Caption("Water Temp, C");
        columns.AddFor(d => d.HydrogenFlow).DataField("hydrogenFlow").Caption("H2 Flow,SPI");
    })
)

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script>
    var connection = new signalR.HubConnectionBuilder()
        .withUrl("http://172.20.4.209:443/hubs/generator")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    $(function () {
        connection.start()
            .then(function () {

                var store = new DevExpress.data.CustomStore({
                    load: function () {
                        return connection.invoke("GetAllGenerators");
                    }, key: "identifier"
                });
                $("#genReadings").dxDataGrid({
                    dataSource: store,
                    visible: true
                });

                connection.on("SendGeneratorReading", function (data) {
                    store.push([{ type: "update", key: data.identifier, data: data }]);
                });
            });
    });
</script>

@*@(Html.DevExtreme().DataGrid<Order>()
        .ElementAttr(new { @class = "dx-card wide-card" })
        .DataSource(d => d.Mvc().Controller("Orders").LoadAction("Get").Key("OrderID"))
        .ShowBorders(false)
        .FilterRow(f => f.Visible(true))
        .FocusedRowEnabled(true)
        .FocusedRowIndex(0)
        .ColumnAutoWidth(true)
        .ColumnHidingEnabled(true)
        .Columns(columns => {
            columns.AddFor(m => m.OrderID);
            columns.AddFor(m => m.OrderDate);
            columns.AddFor(m => m.CustomerName);
            columns.AddFor(m => m.ShipCountry);
            columns.AddFor(m => m.ShipCity);
        })
        .Paging(p => p.PageSize(10))
        .Pager(p => p
            .ShowPageSizeSelector(true)
            .AllowedPageSizes(new[] { 5, 10, 20 })
            .ShowInfo(true)
        )
    )*@