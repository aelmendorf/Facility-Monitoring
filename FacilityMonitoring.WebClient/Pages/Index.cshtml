@page
@using FacilityMonitoring.Common.DataLayer


<h2>H2 Generators</h2>

@(Html.DevExtreme().DataGrid<GeneratorReadingDTO>()
    .ID("genReadings")
    .Visible(false)
    .ShowBorders(true)
    .HighlightChanges(true)
    .AllowColumnResizing(true)
    .ColumnAutoWidth(true)
    .Columns(columns => {
        columns.AddFor(d => d.TimeStamp).DataField("timeStamp");
        columns.AddFor(d => d.Identifier).DataField("identifier");
        columns.AddFor(d => d.SystemMode).DataField("systemMode");
        columns.AddFor(d => d.OperationMode).DataField("operationMode");
        columns.AddFor(d => d.SystemState).DataField("systemState");
        columns.AddFor(d => d.SystemPressure).DataField("systemPressure").Caption("System Pressure,PSI");
        columns.AddFor(d => d.WaterTemperature).DataField("waterTemperature").Caption("Water Temp, C");
        columns.AddFor(d => d.HydrogenFlow).DataField("hydrogenFlow").Caption("H2 Flow,SPI");
    })
)

<h2>Gas Bay</h2>

@(Html.DevExtreme().DataGrid()
    .ID("boxReadings")
    .Visible(false)
    .ShowBorders(true)
    .HighlightChanges(true)
    .AllowColumnResizing(true)
    .ColumnAutoWidth(true)
)

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script>
    var boxReadingData = [{
        "Identifier":"GasBay"
    }];
    var genconnection = new signalR.HubConnectionBuilder()
        //.withUrl("http://172.20.4.209:443/hubs/generator")
        .withUrl("http://localhost:5000/hubs/generator")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    var boxConnection = new signalR.HubConnectionBuilder()
        //.withUrl("http://172.20.4.209:443/hubs/monitor")
        .withUrl("http://localhost:5000/hubs/monitor")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    $(function () {
        function successCallback(result) {
            console.log("Should be a object: " + result.columns[0]);
        }

        function failureCallback(error) {
          console.error("Error: " + error);
        }

        function generateData(dto) {
            for (var x = 0; x < dto.columns.length; x++){
                boxReadingData.map((d) => d[dto.columns[x].header] = dto.row[dto.columns[x].columnName])
            }    
        } 

        var boxStore = {};

        boxConnection.start().then(function () {
                boxStore = new DevExpress.data.CustomStore({
                        load: function () {
                        return boxReadingData;
                    },key: "Identifier"
                });
            boxConnection.invoke("GetDeviceTable","GasBay").then(generateData, failureCallback).then(function () {
                $("#boxReadings").dxDataGrid({
                    dataSource: boxStore,
                    visible: true
                });
            });

            //boxConnection.on("RecieveAutoReading", function (data) {
            //    var obj = boxReadingData[0];
            //    Object.keys(obj).forEach(function (key, index) {
            //        obj[key] = data[key];
            //    });
            //    boxStore.push([{ type: "update", key: obj.Identifier, data: obj }]);
            //});
        });
    });

    $(function () {
        genconnection.start()
            .then(function () {

                var store = new DevExpress.data.CustomStore({
                    load: function () {
                        return genconnection.invoke("GetAllGenerators");
                    }, key: "identifier"
                });
                $("#genReadings").dxDataGrid({
                    dataSource: store,
                    visible: true
                });

                genconnection.on("SendGeneratorReading", function (data) {
                    store.push([{ type: "update", key: data.identifier, data: data }]);
                });
            });
    });


</script>