@page
@using FacilityMonitoring.Common.DataLayer
@using FacilityMonitoring.Common.Model;
@{
    var logic_type = typeof(LogicType);
    var alert_action = typeof(AlertAction);
}

@(Html.DevExtreme().TabPanel().ID("tables")
                        .Items(tab => { tab.Add()
                         .Title("Analog Channels")
                         .Template(@<text>
            @(Html.DevExtreme().DataGrid<AnalogChannel>()
                .ID("analogChannels")
                .ElementAttr(new { @class = "dx-card wide-card" })
                .DataSource(d => d.Mvc()
                .Controller("Registers")
                .LoadAction("AnalogRegisters")
                .UpdateAction("AnalogChannelUpdate")
                .Key("Id"))
                .Visible(true)
                .WordWrapEnabled(true)
                .ColumnFixing(config => { config.Enabled(true); })
                .ShowBorders(true)
                .FocusedRowEnabled(true)
                .Pager(p => p
                .AllowedPageSizes(new[] { 2, 4, 6, 8, 10, 12, 14, 16 })
                .ShowInfo(true)
                .ShowNavigationButtons(true)
                .ShowPageSizeSelector(true)
                .Visible(true))
                .Paging(p => p.PageSize(8))
                .ColumnChooser(c => c
                .Enabled(true)
                .Mode(GridColumnChooserMode.Select))
                .AllowColumnResizing(true)
                .ColumnAutoWidth(true)
                .Editing(e => e.Mode(GridEditMode.Popup)
                .AllowUpdating(true)
                .Popup(p => p.Title("Register Info")
                        .ShowTitle(true)
                    .Position(pos => pos
                        .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                        .At(HorizontalAlignment.Center, VerticalAlignment.Top)
                        .Of(new JS("window"))
                    )
                )
                .Form(f => f.Items(items => {
                    items.AddGroup()
                    .ColCount(2)
                    .ColSpan(2)
                    .Items(groupItems => {
                        groupItems.AddSimpleFor(m => m.Id);
                        groupItems.AddSimpleFor(m => m.Name);
                        groupItems.AddSimpleFor(m => m.Connected);
                        groupItems.AddSimpleFor(m => m.Bypass);
                        groupItems.AddSimpleFor(m => m.Logic);
                        groupItems.AddSimpleFor(m => m.Display);
                        groupItems.AddSimpleFor(m => m.ValueDivisor);
                    });
                    items.AddGroup()
                    .Caption("Alert Settings")
                    .ColCount(3)
                    .ColSpan(3)
                    .AlignItemLabels(true)
                    .Items(groupItems => {
                        groupItems.AddGroup().Caption("Alarm 1")
                        .ColCount(3)
                        .ColSpan(3).Items(a1 => {
                            a1.AddSimpleFor(m => m.Alarm1SetPoint);
                            a1.AddSimpleFor(m => m.Alarm1Action);
                            a1.AddSimpleFor(m => m.Alarm1Enabled);
                        });

                        groupItems.AddGroup().Caption("Alarm 3")
                        .ColCount(3)
                        .ColSpan(3).Items(a2 => {
                            a2.AddSimpleFor(m => m.Alarm2SetPoint);
                            a2.AddSimpleFor(m => m.Alarm2Action);
                            a2.AddSimpleFor(m => m.Alarm2Enabled);
                        });

                        groupItems.AddGroup().Caption("Alarm 3")
                        .ColCount(3)
                        .ColSpan(3).Items(a3 => {
                            a3.AddSimpleFor(m => m.Alarm3SetPoint);
                            a3.AddSimpleFor(m => m.Alarm3Action);
                            a3.AddSimpleFor(m => m.Alarm3Enabled);
                        });
                    });

                    items.AddGroup()
                    .Caption("Detector Setup")
                    .ColCount(3)
                    .ColSpan(3)
                    .Items(groupItems => {
                        groupItems.AddGroup().ColCount(2).ColSpan(3).Caption("Analog Calibration").Items(analogCal => {
                            analogCal.AddSimpleFor(m => m.Slope);
                            analogCal.AddSimpleFor(m => m.Offset);
                        });

                        groupItems.AddGroup().ColCount(3).ColSpan(3).Caption("Detector Setup").Items(detector => {
                            detector.AddSimpleFor(m => m.SensorTypeId);
                            detector.AddSimpleFor(m => m.ZeroValue);
                            detector.AddSimpleFor(m => m.MaxValue);
                        });
                    });
                })))
                .Columns(columns => {

                    columns.AddFor(d => d.Id).DataField("Id").Caption("RegisterId").Alignment(HorizontalAlignment.Center).AllowEditing(false);
                    columns.AddFor(d => d.Name).DataField("Name").Caption("Name").Alignment(HorizontalAlignment.Center).AllowFixing(true).FixedPosition(HorizontalEdge.Left);
                    columns.AddFor(d => d.RegisterIndex).Alignment(HorizontalAlignment.Center).DataField("RegisterIndex").Caption("Register Index");
                    columns.AddFor(d => d.RegisterLength).Alignment(HorizontalAlignment.Center).DataField("RegisterLength").Caption("Register Length");
                    columns.AddFor(d => d.Connected).Alignment(HorizontalAlignment.Center).DataField("Connected").Caption("Connected").DataType(GridColumnDataType.Boolean);
                    columns.AddFor(d => d.Bypass).Alignment(HorizontalAlignment.Center).DataField("Bypass").Caption("ByPass?").AllowEditing(true);
                    columns.AddFor(d => d.PropertyMap).Alignment(HorizontalAlignment.Center).DataField("PropertyMap").Caption("Property Name").AllowEditing(false);
                    columns.AddFor(d => d.Logic).Alignment(HorizontalAlignment.Center).DataField("Logic").Caption("Logic Type(High/Low)").Lookup(lookup => {
                        lookup.DataSource(Html.GetEnumSelectList<LogicType>().ToList().Select(i => new { Value = int.Parse(i.Value), Text = i.Text })).ValueExpr("Value").DisplayExpr("Text");
                    });
                    columns.AddFor(d => d.Display).Alignment(HorizontalAlignment.Center).DataField("Display").Caption("Display?");
                    columns.AddFor(d => d.SensorTypeId).Alignment(HorizontalAlignment.Center).Lookup(lookup => {
                        lookup.DataSource(d => d.Mvc().Controller("SensorType")
                        .LoadAction("SensorTypes").Key("Id"))
                            .DisplayExpr("Name")
                            .ValueExpr("Id");
                    });

                    columns.Add().Caption("Equation Parameters").Alignment(HorizontalAlignment.Center).Columns(sub => {
                        sub.Add().Caption("Current Equation Param").Alignment(HorizontalAlignment.Center).Columns(subSub => {
                            subSub.AddFor(d => d.Slope).DataField("Slope").Caption("Slope").Alignment(HorizontalAlignment.Center);
                            subSub.AddFor(d => d.Offset).DataField("Offset").Caption("Offset").Alignment(HorizontalAlignment.Center);
                        });
                        sub.Add().Caption("Detector Equation Param").Alignment(HorizontalAlignment.Center).Columns(d => {
                            d.AddFor(d => d.ZeroValue).DataField("ZeroValue").Caption(" Detector Zero Value").Alignment(HorizontalAlignment.Center);
                            d.AddFor(d => d.MaxValue).DataField("MaxValue").Caption("Detector Max Value").Alignment(HorizontalAlignment.Center);
                        });
                    });
                    columns.Add().Caption("Alert Settings").Alignment(HorizontalAlignment.Center).Columns(col => {
                        col.Add().Caption("Alarm 1").Columns(col1 => {
                            col1.AddFor(d => d.Alarm1SetPoint).DataField("Alarm1SetPoint").Caption("Alarm1SetPoint").Alignment(HorizontalAlignment.Center);
                            col1.AddFor(d => d.Alarm1Action).DataField("Alarm1Action")
                            .Caption("Alarm1Action")
                            .Alignment(HorizontalAlignment.Center)
                            .Lookup(lookup => {
                                lookup.DataSource(Html.GetEnumSelectList<AlertAction>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text })).ValueExpr("Value").DisplayExpr("Text");
                            });
                            col1.AddFor(d => d.Alarm1Enabled).DataField("Alarm1Enabled").Caption("Alarm1Enabled").Alignment(HorizontalAlignment.Center);
                        });
                        col.Add().Caption("Alarm 2").Alignment(HorizontalAlignment.Center).Columns(col2 => {
                            col2.AddFor(d => d.Alarm2SetPoint).DataField("Alarm2SetPoint").Caption("Alarm 2 SetPoint").Alignment(HorizontalAlignment.Center);
                            col2.AddFor(d => d.Alarm2Action).DataField("Alarm2Action")
                            .Caption("Alarm 2 Action")
                            .Alignment(HorizontalAlignment.Center)
                            .Lookup(lookup => {
                                lookup.DataSource(Html.GetEnumSelectList<AlertAction>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text })).ValueExpr("Value").DisplayExpr("Text");
                            });
                            col2.AddFor(d => d.Alarm2Enabled).DataField("Alarm2Enabled")
                            .Caption("Alarm 2 Enabled").Alignment(HorizontalAlignment.Center);

                        });
                        col.Add().Caption("Alarm 3").Alignment(HorizontalAlignment.Center).Columns(col3 => {
                            col3.AddFor(d => d.Alarm3SetPoint).DataField("Alarm3SetPoint").Caption("Alarm 3 Set Point").Alignment(HorizontalAlignment.Center);
                            col3.AddFor(d => d.Alarm3Action).DataField("Alarm3Action")
                            .Caption("Alarm 3 Action")
                            .Alignment(HorizontalAlignment.Center)
                            .Lookup(lookup => {
                                lookup.DataSource(Html.GetEnumSelectList<AlertAction>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text })).ValueExpr("Value").DisplayExpr("Text");
                            });
                            col3.AddFor(d => d.Alarm3Enabled).DataField("Alarm3Enabled").Caption("Alarm 3 Enabled").Alignment(HorizontalAlignment.Center);
                        });
                    });
                    columns.AddFor(d => d.ValueDivisor).DataField("ValueDivisor").Caption("Divisor").Alignment(HorizontalAlignment.Center);

                }))

        </text>);
        tab.Add().Title("Digital Input Channels").Template(@<text>

                @(Html.DevExtreme().DataGrid<DigitalInputChannel>
                    ()
                    .ID("digitalInputChannels")
                    .DataSource(d => d.Mvc()
                    .Controller("DigitalInputChannels")
                    .LoadAction("DigitalInputRegisters")
                    .UpdateAction("DigitalChannelUpdate")
                    .Key("Id"))
                    .Visible(true)
                    .WordWrapEnabled(true)
                    .ColumnFixing(config => { config.Enabled(true); })
                    .ShowBorders(true)
                    .FocusedRowEnabled(true)
                    .Pager(p => p
                    .AllowedPageSizes(new[] { 2, 4, 6, 8, 10, 12, 14, 16 })
                    .ShowInfo(true)
                    .ShowNavigationButtons(true)
                    .ShowPageSizeSelector(true)
                    .Visible(true))
                    .Paging(p => p.PageSize(8))
                    .ColumnChooser(c => c
                        .Enabled(true)
                        .Mode(GridColumnChooserMode.Select))
                    .AllowColumnResizing(true)
                    .ColumnAutoWidth(true)
                    .Editing(e => e.Mode(GridEditMode.Popup)
                    .AllowUpdating(true)
                    .Popup(p => p.Title("Register Info")
                            .ShowTitle(true)
                        .Position(pos => pos
                            .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                            .At(HorizontalAlignment.Center, VerticalAlignment.Top)
                            .Of(new JS("window"))
                        )
                    )
                    .Form(f => f.Items(items => {
                        items.AddGroup()
                        .ColCount(1)
                        .ColSpan(1)
                        .Items(groupItems => {
                            groupItems.AddSimpleFor(m => m.Id);
                            groupItems.AddSimpleFor(m => m.Name);
                            groupItems.AddSimpleFor(m => m.Connected);
                            groupItems.AddSimpleFor(m => m.Bypass);
                            groupItems.AddSimpleFor(m => m.Logic);
                            groupItems.AddSimpleFor(m => m.Display);
                            groupItems.AddSimpleFor(m => m.AlarmAction);
                            groupItems.AddSimpleFor(m => m.SensorType);

                        });
                    })))
    
                    .Columns(columns => {

                        columns.AddFor(d => d.Id).DataField("Id").Caption("RegisterId").Alignment(HorizontalAlignment.Center).AllowEditing(false);
                        columns.AddFor(d => d.Name).DataField("Name").Caption("Name").Alignment(HorizontalAlignment.Center).AllowFixing(true).FixedPosition(HorizontalEdge.Left);
                        columns.AddFor(d => d.RegisterIndex).Alignment(HorizontalAlignment.Center).DataField("RegisterIndex").Caption("Register Index");
                        columns.AddFor(d => d.RegisterLength).Alignment(HorizontalAlignment.Center).DataField("RegisterLength").Caption("Register Length");
                        columns.AddFor(d => d.Connected).Alignment(HorizontalAlignment.Center).DataField("Connected").Caption("Connected").DataType(GridColumnDataType.Boolean);
                        columns.AddFor(d => d.Bypass).Alignment(HorizontalAlignment.Center).DataField("Bypass").Caption("ByPass?").AllowEditing(true);
                        columns.AddFor(d => d.PropertyMap).Alignment(HorizontalAlignment.Center).DataField("PropertyMap").Caption("Property Name").AllowEditing(false);
                        columns.AddFor(d => d.Logic).Alignment(HorizontalAlignment.Center).DataField("Logic").Caption("Logic Type(High/Low)").Lookup(lookup=> {
                            lookup.DataSource(Html.GetEnumSelectList<LogicType>().ToList().Select(i=>new { Value=int.Parse(i.Value),Text=i.Text})).ValueExpr("Value").DisplayExpr("Text");
                        });
                        columns.AddFor(d => d.Display).Alignment(HorizontalAlignment.Center).DataField("Display").Caption("Display?");
                        columns.AddFor(d => d.AlarmAction).DataField("AlarmAction").Caption("Alert Action").Lookup(lookup => {
                            lookup.DataSource(Html.GetEnumSelectList<AlertAction>().ToList().Select(i=>new { Value=int.Parse(i.Value),Text=i.Text})).ValueExpr("Value").DisplayExpr("Text");

                        });
                        columns.AddFor(d => d.SensorTypeId).Alignment(HorizontalAlignment.Center).Lookup(lookup => {
                        lookup.DataSource(d => d.Mvc().Controller("SensorType")
                            .LoadAction("SensorTypes").Key("Id"))
                            .DisplayExpr("Name")
                            .ValueExpr("Id");
                        });

                    }))
            </text>);
                            tab.Add().Title("Digital Output Channels")
                            .Template(@<text>
                    @(Html.DevExtreme().DataGrid<DigitalOutputChannel>
                        ()
                        .ID("digitalOutputChannels")
                        .DataSource(d => d.Mvc()
                        .Controller("DigitalOutputChannels")
                        .LoadAction("DigitalOutputRegisters")
                        .UpdateAction("OutputChannelUpdate")
                        .Key("Id"))
                        .Visible(true)
                        .WordWrapEnabled(true)
                        .ColumnFixing(config => { config.Enabled(true); })
                        .ShowBorders(true)
                        .FocusedRowEnabled(true)
                        .Paging(p => p.PageSize(8))
                        .ColumnChooser(c => c
                            .Enabled(true)
                            .Mode(GridColumnChooserMode.Select))
                        .AllowColumnResizing(true)
                        .ColumnAutoWidth(true)
                        .Editing(e => e.Mode(GridEditMode.Popup)
                        .AllowUpdating(true)
                                .Popup(p => p.Title("Register Info")
                                    .ShowTitle(true)
                                .Position(pos => pos
                                    .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                                    .At(HorizontalAlignment.Center, VerticalAlignment.Top)
                                    .Of(new JS("window"))
                                )
                            )
                            .Form(f => f.Items(items => {
                                items.AddGroup()
                                .ColCount(3)
                                .ColSpan(3)
                                .Items(groupItems => {
                                    groupItems.AddSimpleFor(m => m.Id);
                                    groupItems.AddSimpleFor(m => m.Name);
                                    groupItems.AddSimpleFor(m => m.Connected);
                                    groupItems.AddSimpleFor(m => m.Bypass);
                                    groupItems.AddSimpleFor(m => m.Logic);
                                    groupItems.AddSimpleFor(m => m.Display);
                                    groupItems.AddSimpleFor(m => m.OutputControl);
                                });
                            })))
                        .Columns(columns => {

                            columns.AddFor(d => d.Id).DataField("Id").Caption("RegisterId").Alignment(HorizontalAlignment.Center).AllowEditing(false);
                            columns.AddFor(d => d.Name).DataField("Name").Caption("Name").Alignment(HorizontalAlignment.Center).AllowFixing(true).FixedPosition(HorizontalEdge.Left);
                            columns.AddFor(d => d.RegisterIndex).Alignment(HorizontalAlignment.Center).DataField("RegisterIndex").Caption("Register Index");
                            columns.AddFor(d => d.RegisterLength).Alignment(HorizontalAlignment.Center).DataField("RegisterLength").Caption("Register Length");
                            columns.AddFor(d => d.Connected).Alignment(HorizontalAlignment.Center).DataField("Connected").Caption("Connected").DataType(GridColumnDataType.Boolean);
                            columns.AddFor(d => d.Bypass).Alignment(HorizontalAlignment.Center).DataField("Bypass").Caption("ByPass?").AllowEditing(true);
                            columns.AddFor(d => d.PropertyMap).Alignment(HorizontalAlignment.Center).DataField("PropertyMap").Caption("Property Name").AllowEditing(false);
                            columns.AddFor(d => d.Logic).Alignment(HorizontalAlignment.Center).DataField("Logic").Caption("Logic Type(High/Low)").Lookup(lookup => {
                                lookup.DataSource(Html.GetEnumSelectList<LogicType>().ToList().Select(i => new { Value = int.Parse(i.Value), Text = i.Text })).ValueExpr("Value").DisplayExpr("Text");
                            });
                            columns.AddFor(d => d.Display).Alignment(HorizontalAlignment.Center).DataField("Display").Caption("Display?");
                            columns.AddFor(d => d.OutputControl).DataField("OutputControl").Caption("Output Control").Lookup(lookup => {
                                lookup.DataSource(Html.GetEnumSelectList<OutputControl>().ToList().Select(i => new { Value = int.Parse(i.Value), Text = i.Text })).ValueExpr("Value").DisplayExpr("Text");

                            });

                        }))
            </text>);
    })
    .SelectedIndex(0)
.Loop(false)
.AnimationEnabled(false)
.SwipeEnabled(true)
.ItemTitleTemplate(@<text><span><%= title %></span></text>))




<script>

</script>
